"use strict";(self.webpackChunkmongodb_memory_server_website=self.webpackChunkmongodb_memory_server_website||[]).push([[26],{3981:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"guides/faq","title":"Frequently Asked Questions","description":"Do binaries get automatically deleted?","source":"@site/../docs/guides/faq.md","sourceDirName":"guides","slug":"/guides/faq","permalink":"/mongodb-memory-server/docs/guides/faq","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/mongodb-memory-server/edit/master/docs/../docs/guides/faq.md","tags":[],"version":"current","frontMatter":{"id":"faq","title":"Frequently Asked Questions"},"sidebar":"guides","previous":{"title":"Quick Start Guide","permalink":"/mongodb-memory-server/docs/guides/quick-start-guide"},"next":{"title":"Known Issues","permalink":"/mongodb-memory-server/docs/guides/known-issues"}}');var o=s(4848),i=s(8453);const a={id:"faq",title:"Frequently Asked Questions"},r=void 0,d={},c=[{value:"Do binaries get automatically deleted?",id:"do-binaries-get-automatically-deleted",level:3},{value:"Why is there no documentation about class-options / interfaces in the documentation?",id:"why-is-there-no-documentation-about-class-options--interfaces-in-the-documentation",level:3},{value:"Do testing database paths get cleaned up?",id:"do-testing-database-paths-get-cleaned-up",level:3},{value:"Does this package support Explicit Resource Management?",id:"does-this-package-support-explicit-resource-management",level:3}];function l(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h3,{id:"do-binaries-get-automatically-deleted",children:"Do binaries get automatically deleted?"}),"\n",(0,o.jsxs)(t.p,{children:["No, this package will ",(0,o.jsx)(t.strong,{children:"not"})," delete any binaries, so after an system / package upgrade the binaries may have to be cleaned manually."]}),"\n",(0,o.jsx)(t.h3,{id:"why-is-there-no-documentation-about-class-options--interfaces-in-the-documentation",children:"Why is there no documentation about class-options / interfaces in the documentation?"}),"\n",(0,o.jsx)(t.p,{children:"It is currently recommended to directly look at the TSDoc for these properties to get their type & documentation."}),"\n",(0,o.jsx)(t.h3,{id:"do-testing-database-paths-get-cleaned-up",children:"Do testing database paths get cleaned up?"}),"\n",(0,o.jsxs)(t.p,{children:["If the Database-path is a temporary directory (generated with ",(0,o.jsx)(t.code,{children:"mkdtemp"}),"), then it will automatically get cleaned-up when calling ",(0,o.jsx)(t.code,{children:".stop()"}),", this can be disabled with ",(0,o.jsx)(t.code,{children:".stop(false)"}),".",(0,o.jsx)(t.br,{}),"\n","If the Database-path is manually set with ",(0,o.jsx)(t.code,{children:"dbPath"}),", then it needs to be manually cleaned-up with ",(0,o.jsx)(t.code,{children:".cleanup(true)"}),"."]}),"\n",(0,o.jsxs)(t.admonition,{type:"tip",children:[(0,o.jsxs)(t.p,{children:["Since ",(0,o.jsx)(t.code,{children:"8.4.0"})," objects can also be used instead of just booleans for parameter in ",(0,o.jsx)(t.a,{href:"/mongodb-memory-server/docs/api/classes/mongo-memory-server#stop",children:(0,o.jsx)(t.code,{children:"stop"})})," and ",(0,o.jsx)(t.a,{href:"/mongodb-memory-server/docs/api/classes/mongo-memory-server#cleanup",children:(0,o.jsx)(t.code,{children:"cleanup"})})," (the same applies to ",(0,o.jsx)(t.code,{children:"MongoMemoryReplSet"}),")."]}),(0,o.jsxs)(t.p,{children:["For Example ",(0,o.jsx)(t.code,{children:".stop({ doCleanup: false })"})," can be used instead of ",(0,o.jsx)(t.code,{children:".stop(false)"}),"."]})]}),"\n",(0,o.jsx)(t.h3,{id:"does-this-package-support-explicit-resource-management",children:"Does this package support Explicit Resource Management?"}),"\n",(0,o.jsxs)(t.p,{children:["Yes, ",(0,o.jsx)(t.code,{children:"[Symbol.asyncDispose]"})," is implemented for all manager classes, behavior can be configured via ",(0,o.jsx)(t.code,{children:"dispose"})," options:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/mongodb-memory-server/docs/api/interfaces/mongo-memory-server-opts#dispose",children:(0,o.jsx)(t.code,{children:"MongoMemoryServerOpts.dispose"})})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/mongodb-memory-server/docs/api/interfaces/replset-opts#dispose",children:(0,o.jsx)(t.code,{children:"ReplSetOpts.dispose"})})}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["Note that when using ",(0,o.jsx)(t.code,{children:"await using server ="})," that ",(0,o.jsx)(t.code,{children:"[Symbol.asyncDispose]"})," is called at the end of the scope even if the value is reassigned to something out of the current scope."]})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>r});var n=s(6540);const o={},i=n.createContext(o);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);