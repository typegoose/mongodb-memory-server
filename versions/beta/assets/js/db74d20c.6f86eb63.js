"use strict";(self.webpackChunkmongodb_memory_server_website=self.webpackChunkmongodb_memory_server_website||[]).push([[973],{5680:function(e,n,t){t.d(n,{xA:function(){return g},yg:function(){return u}});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),y=s(t),m=r,u=y["".concat(p,".").concat(m)]||y[m]||d[m]||i;return t?a.createElement(u,o(o({ref:n},g),{},{components:t})):a.createElement(u,o({ref:n},g))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[y]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5764:function(e,n,t){t.r(n),t.d(n,{assets:function(){return g},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return y}});var a=t(8168),r=t(8587),i=(t(6540),t(5680)),o=["components"],l={id:"mongo-memory-replset",title:"MongoMemoryReplSet"},p=void 0,s={unversionedId:"api/classes/mongo-memory-replset",id:"api/classes/mongo-memory-replset",title:"MongoMemoryReplSet",description:"API Documentation of MongoMemoryReplSet-Class",source:"@site/../docs/api/classes/mongo-memory-replset.md",sourceDirName:"api/classes",slug:"/api/classes/mongo-memory-replset",permalink:"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-memory-replset",draft:!1,editUrl:"https://github.com/typegoose/mongodb-memory-server/edit/master/docs/../docs/api/classes/mongo-memory-replset.md",tags:[],version:"current",frontMatter:{id:"mongo-memory-replset",title:"MongoMemoryReplSet"},sidebar:"api",previous:{title:"MongoMemoryServer",permalink:"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-memory-server"},next:{title:"MongoInstance",permalink:"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-instance"}},g={},y=[{value:"Functions",id:"functions",level:2},{value:"new",id:"new",level:3},{value:"create",id:"create",level:3},{value:"stateChange",id:"statechange",level:3},{value:"getInstanceOpts",id:"getinstanceopts",level:3},{value:"getUri",id:"geturi",level:3},{value:"start",id:"start",level:3},{value:"initAllServers",id:"initallservers",level:3},{value:"ensureKeyFile",id:"ensurekeyfile",level:3},{value:"stop",id:"stop",level:3},{value:"cleanup",id:"cleanup",level:3},{value:"waitUntilRunning",id:"waituntilrunning",level:3},{value:"_initReplSet",id:"_initreplset",level:3},{value:"_initServer",id:"_initserver",level:3},{value:"_waitForPrimary",id:"_waitforprimary",level:3},{value:"Values",id:"values",level:2},{value:"servers",id:"servers",level:3},{value:"instanceOpts",id:"instanceopts",level:3},{value:"_instanceOpts",id:"_instanceopts",level:3},{value:"binaryOpts",id:"binaryopts",level:3},{value:"_binaryOpts",id:"_binaryopts",level:3},{value:"replSetOpts",id:"replsetopts",level:3},{value:"_replSetOpts",id:"_replsetopts",level:3},{value:"_keyfiletmp",id:"_keyfiletmp",level:3},{value:"state",id:"state",level:3},{value:"_state",id:"_state",level:3},{value:"_ranCreateAuth",id:"_rancreateauth",level:3}],d={toc:y},m="wrapper";function u(e){var n=e.components,t=(0,r.A)(e,o);return(0,i.yg)(m,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"API Documentation of ",(0,i.yg)("inlineCode",{parentName:"p"},"MongoMemoryReplSet"),"-Class"),(0,i.yg)("h2",{id:"functions"},"Functions"),(0,i.yg)("h3",{id:"new"},"new"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"constructor(opts: Partial<MongoMemoryReplSetOpts> = {})")),(0,i.yg)("p",null,"Create an new ReplSet without starting it"),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"When directly starting the replset, ",(0,i.yg)("a",{parentName:"p",href:"#create"},(0,i.yg)("inlineCode",{parentName:"a"},"create"))," should be used")),(0,i.yg)("h3",{id:"create"},"create"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"static async create(opts?: Partial<MongoMemoryReplSetOpts>): Promise<MongoMemoryReplSet>")),(0,i.yg)("p",null,"Create an new ReplSet and start it (while being an Promise)"),(0,i.yg)("h3",{id:"statechange"},"stateChange"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected stateChange(newState: MongoMemoryReplSetStates, ...args: any[]): void")),(0,i.yg)("p",null,"Used to change the state of the class, uses ",(0,i.yg)("a",{parentName:"p",href:"/mongodb-memory-server/versions/beta/docs/api/enums/mongo-memory-replset-states"},(0,i.yg)("inlineCode",{parentName:"a"},"MongoMemoryReplSetStates")," enum"),", it is ",(0,i.yg)("inlineCode",{parentName:"p"},"protected")," to not accidentally use it"),(0,i.yg)("h3",{id:"getinstanceopts"},"getInstanceOpts"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected getInstanceOpts(baseOpts: MongoMemoryInstancePropBase = {}): MongoMemoryInstanceProp")),(0,i.yg)("p",null,"Constructs the options used for an instance"),(0,i.yg)("h3",{id:"geturi"},"getUri"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"getUri(otherDb?: string): string")),(0,i.yg)("p",null,"Get an mongodb-usable uri (can also be used in mongoose)"),(0,i.yg)("p",null,"When no arguments are set, the URI will always use ip ",(0,i.yg)("inlineCode",{parentName:"p"},"127.0.0.1")," and end with ",(0,i.yg)("inlineCode",{parentName:"p"},"/?replicaSet=ReplSetName")," (not setting a database).",(0,i.yg)("br",{parentName:"p"}),"\n","When setting ",(0,i.yg)("inlineCode",{parentName:"p"},"otherDbName"),", the value of ",(0,i.yg)("inlineCode",{parentName:"p"},"otherDbName")," will be appended after ",(0,i.yg)("inlineCode",{parentName:"p"},"/")," and before any query arguments.",(0,i.yg)("br",{parentName:"p"}),"\n","When setting ",(0,i.yg)("inlineCode",{parentName:"p"},"otherIp"),", the ip will be the value of ",(0,i.yg)("inlineCode",{parentName:"p"},"otherIp")," instead of ",(0,i.yg)("inlineCode",{parentName:"p"},"127.0.0.1")," (for all instances)."),(0,i.yg)("h3",{id:"start"},"start"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"async start(): Promise<void>")),(0,i.yg)("p",null,"Used to start an new ReplSet or to Re-Start an stopped ReplSet"),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Will Error if ReplSet is already running")),(0,i.yg)("h3",{id:"initallservers"},"initAllServers"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected async initAllServers(): Promise<void>")),(0,i.yg)("p",null,"Used by ",(0,i.yg)("a",{parentName:"p",href:"#start"},(0,i.yg)("inlineCode",{parentName:"a"},"start"))," and to restart without fully running everything again"),(0,i.yg)("h3",{id:"ensurekeyfile"},"ensureKeyFile"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected async ensureKeyFile(): Promise<string>")),(0,i.yg)("p",null,"Ensures and returns that ",(0,i.yg)("a",{parentName:"p",href:"#_keyfiletmp"},(0,i.yg)("inlineCode",{parentName:"a"},"_keyfiletmp"))," is defined an exists and also that the keyfile is created"),(0,i.yg)("h3",{id:"stop"},"stop"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"async stop(cleanupOptions?: Cleanup): Promise<boolean>")),(0,i.yg)("p",null,"Stop an running instance, this function will by default call ",(0,i.yg)("a",{parentName:"p",href:"#cleanup"},(0,i.yg)("inlineCode",{parentName:"a"},".cleanup"))," with ",(0,i.yg)("inlineCode",{parentName:"p"},"{ doCleanup: true, force: false }"),"."),(0,i.yg)("p",null,"With ",(0,i.yg)("inlineCode",{parentName:"p"},"cleanupOptions")," options for cleanup can be manually set."),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Will not Error if instance is not running")),(0,i.yg)("h3",{id:"cleanup"},"cleanup"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"async cleanup(options?: Cleanup): Promise<void>")),(0,i.yg)("p",null,"Cleanup all files used by this ReplSet's instances, by default ",(0,i.yg)("inlineCode",{parentName:"p"},"{ doCleanup: true, force: false }")," is used."),(0,i.yg)("p",null,"With ",(0,i.yg)("inlineCode",{parentName:"p"},"options")," can be set how to run a cleanup."),(0,i.yg)("h3",{id:"waituntilrunning"},"waitUntilRunning"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"async waitUntilRunning(): Promise<void>")),(0,i.yg)("p",null,"Wait until all instances are running."),(0,i.yg)("p",null,"It is recommended to ",(0,i.yg)("inlineCode",{parentName:"p"},"await")," the promise returned from ",(0,i.yg)("inlineCode",{parentName:"p"},"start")," when available."),(0,i.yg)("p",null,"Does not start the replset instance if not already starting (unlike ",(0,i.yg)("a",{parentName:"p",href:"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-memory-server#ensureinstance"},(0,i.yg)("inlineCode",{parentName:"a"},"ensureInstance")),")."),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Will Error if state is not ",(0,i.yg)("inlineCode",{parentName:"p"},"running")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"init"),".")),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Will ",(0,i.yg)("strong",{parentName:"p"},"not")," Error if a error is encountered while waiting.")),(0,i.yg)("h3",{id:"_initreplset"},"_initReplSet"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected async _initReplSet(): Promise<void>")),(0,i.yg)("p",null,"This is used to connect to the first server and initiate the ReplSet with an command",(0,i.yg)("br",null),"\nAlso enables ",(0,i.yg)("inlineCode",{parentName:"p"},"auth")),(0,i.yg)("h3",{id:"_initserver"},"_initServer"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected _initServer(instanceOpts: MongoMemoryInstanceProp): MongoMemoryServer")),(0,i.yg)("p",null,"Creates an new ",(0,i.yg)("a",{parentName:"p",href:"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-memory-server"},(0,i.yg)("inlineCode",{parentName:"a"},"instance"))," for the ReplSet"),(0,i.yg)("h3",{id:"_waitforprimary"},"_waitForPrimary"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected async _waitForPrimary(timeout: number = 1000 * 30, where?: string): Promise<void>")),(0,i.yg)("p",null,"Wait until the ReplSet has elected an Primary, the ",(0,i.yg)("inlineCode",{parentName:"p"},"where")," string will be added to the error if the timeout is reached"),(0,i.yg)("h2",{id:"values"},"Values"),(0,i.yg)("h3",{id:"servers"},"servers"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"servers: MongoMemoryServer[]")),(0,i.yg)("p",null,"Stores all the servers of this ReplSet"),(0,i.yg)("h3",{id:"instanceopts"},"instanceOpts"),(0,i.yg)("p",null,"Typings:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"get instanceOpts(): MongoMemoryInstancePropBase[]")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"set instanceOpts(val: MongoMemoryInstancePropBase[])"))),(0,i.yg)("p",null,"Getter & Setter for ",(0,i.yg)("a",{parentName:"p",href:"#_instanceopts"},(0,i.yg)("inlineCode",{parentName:"a"},"_instanceOpts"))),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Will Throw an Error if ",(0,i.yg)("inlineCode",{parentName:"p"},"state")," is not ",(0,i.yg)("inlineCode",{parentName:"p"},"stopped"))),(0,i.yg)("h3",{id:"_instanceopts"},"_instanceOpts"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected _instanceOpts!: MongoMemoryInstancePropBase[]")),(0,i.yg)("p",null,"Stores Options used for an instance"),(0,i.yg)("h3",{id:"binaryopts"},"binaryOpts"),(0,i.yg)("p",null,"Typings:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"get binaryOpts(): MongoBinaryOpts")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"set binaryOpts(val: MongoBinaryOpts)"))),(0,i.yg)("p",null,"Getter & Setter for ",(0,i.yg)("a",{parentName:"p",href:"#_binaryopts"},(0,i.yg)("inlineCode",{parentName:"a"},"_binaryOpts"))),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Will Throw an Error if ",(0,i.yg)("inlineCode",{parentName:"p"},"state")," is not ",(0,i.yg)("inlineCode",{parentName:"p"},"stopped"))),(0,i.yg)("h3",{id:"_binaryopts"},"_binaryOpts"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected _binaryOpts!: MongoBinaryOpts")),(0,i.yg)("p",null,"Stores the options used for the binary"),(0,i.yg)("h3",{id:"replsetopts"},"replSetOpts"),(0,i.yg)("p",null,"Typings:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"get replSetOpts(): ReplSetOpts")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"set replSetOpts(val: ReplSetOpts)"))),(0,i.yg)("p",null,"Getter & Setter for ",(0,i.yg)("a",{parentName:"p",href:"#_replsetopts"},(0,i.yg)("inlineCode",{parentName:"a"},"_replSetOpts"))),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Will Throw an Error if ",(0,i.yg)("inlineCode",{parentName:"p"},"state")," is not ",(0,i.yg)("inlineCode",{parentName:"p"},"stopped"))),(0,i.yg)("h3",{id:"_replsetopts"},"_replSetOpts"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected _replSetOpts!: Required<ReplSetOpts>")),(0,i.yg)("p",null,"Stores the options used for the ReplSet Initiation, uses ",(0,i.yg)("a",{parentName:"p",href:"/mongodb-memory-server/versions/beta/docs/api/interfaces/replset-opts"},(0,i.yg)("inlineCode",{parentName:"a"},"ReplSetOpts")),"."),(0,i.yg)("h3",{id:"_keyfiletmp"},"_keyfiletmp"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected _keyfiletmp?: string")),(0,i.yg)("p",null,"Stores the path of the created temporary directory for the keyfile location"),(0,i.yg)("h3",{id:"state"},"state"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"get state(): MongoMemoryReplSetStates")),(0,i.yg)("p",null,"Getter for ",(0,i.yg)("a",{parentName:"p",href:"#_state"},(0,i.yg)("inlineCode",{parentName:"a"},"_state"))),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Will Throw an Error if ",(0,i.yg)("inlineCode",{parentName:"p"},"state")," is not ",(0,i.yg)("inlineCode",{parentName:"p"},"stopped"))),(0,i.yg)("h3",{id:"_state"},"_state"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected _state: MongoMemoryReplSetStates")),(0,i.yg)("p",null,"Stores the current State, uses ",(0,i.yg)("a",{parentName:"p",href:"/mongodb-memory-server/versions/beta/docs/api/enums/mongo-memory-replset-states"},(0,i.yg)("inlineCode",{parentName:"a"},"MongoMemoryReplSetStates")," enum"),"."),(0,i.yg)("h3",{id:"_rancreateauth"},"_ranCreateAuth"),(0,i.yg)("span",{class:"badge badge--warning"},"Internal"),(0,i.yg)("p",null,"Typings: ",(0,i.yg)("inlineCode",{parentName:"p"},"protected _ranCreateAuth: boolean")),(0,i.yg)("p",null,"Stores if the auth creation has already ran"))}u.isMDXComponent=!0}}]);