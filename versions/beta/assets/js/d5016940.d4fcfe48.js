"use strict";(self.webpackChunkmongodb_memory_server_website=self.webpackChunkmongodb_memory_server_website||[]).push([[260],{4650:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/integration-examples/test-runners","title":"Integration with Test Runners","description":"This Guide will show how mongodb-memory-server can be used with different frameworks","source":"@site/../docs/guides/integration-examples/test-runners.md","sourceDirName":"guides/integration-examples","slug":"/guides/integration-examples/test-runners","permalink":"/mongodb-memory-server/versions/beta/docs/guides/integration-examples/test-runners","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/mongodb-memory-server/edit/master/docs/../docs/guides/integration-examples/test-runners.md","tags":[],"version":"current","frontMatter":{"id":"test-runners","title":"Integration with Test Runners"},"sidebar":"guides","previous":{"title":"Supported Systems","permalink":"/mongodb-memory-server/versions/beta/docs/guides/supported-systems"},"next":{"title":"Integration with Docker","permalink":"/mongodb-memory-server/versions/beta/docs/guides/integration-examples/docker"}}');var t=o(4848),r=o(8453);const i={id:"test-runners",title:"Integration with Test Runners"},a=void 0,c={},d=[{value:"jest",id:"jest",level:2},{value:"mocha / chai",id:"mocha--chai",level:2},{value:"vitest",id:"vitest",level:2}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This Guide will show how ",(0,t.jsx)(n.code,{children:"mongodb-memory-server"})," can be used with different frameworks"]}),"\n",(0,t.jsx)(n.h2,{id:"jest",children:"jest"}),"\n",(0,t.jsx)("span",{class:"badge badge--secondary",children:"jest version 29"}),"\n",(0,t.jsxs)(n.p,{children:["For usage with ",(0,t.jsx)(n.code,{children:"jest"})," it is recommended to use the ",(0,t.jsx)(n.a,{href:"https://jestjs.io/docs/en/configuration#globalsetup-string",children:(0,t.jsx)(n.code,{children:"globalSetup"})})," and ",(0,t.jsx)(n.a,{href:"https://jestjs.io/docs/en/configuration#globalteardown-string",children:(0,t.jsx)(n.code,{children:"globalTeardown"})})," options"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"config.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// this file could be anything (like a json directly imported)\n\nexport = {\n  Memory: true,\n  IP: '127.0.0.1',\n  Port: '27017',\n  Database: 'somedb'\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"jest.config.json"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'{\n  "preset": "ts-jest",\n  "globalSetup": "<rootDir>/test/globalSetup.ts",\n  "globalTeardown": "<rootDir>/test/globalTeardown.ts",\n  "setupFilesAfterEnv": [\n    "<rootDir>/test/setupFile.ts"\n  ]\n}\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"globalSetup.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { MongoMemoryServer } from 'mongodb-memory-server';\nimport * as mongoose from 'mongoose';\nimport { config } from './utils/config';\n\nexport = async function globalSetup() {\n  if (config.Memory) { // Config to decide if an mongodb-memory-server instance should be used\n    // it's needed in global space, because we don't want to create a new instance every test-suite\n    const instance = await MongoMemoryServer.create();\n    const uri = instance.getUri();\n    (global as any).__MONGOINSTANCE = instance;\n    process.env.MONGO_URI = uri.slice(0, uri.lastIndexOf('/'));\n  } else {\n    process.env.MONGO_URI = `mongodb://${config.IP}:${config.Port}`;\n  }\n\n  // The following is to make sure the database is clean before a test suite starts\n  const conn = await mongoose.connect(`${process.env.MONGO_URI}/${config.Database}`);\n  await conn.connection.db.dropDatabase();\n  await mongoose.disconnect();\n};\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"globalTeardown.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { MongoMemoryServer } from 'mongodb-memory-server';\nimport { config } from './utils/config';\n\nexport = async function globalTeardown() {\n  if (config.Memory) { // Config to decide if an mongodb-memory-server instance should be used\n    const instance: MongoMemoryServer = (global as any).__MONGOINSTANCE;\n    await instance.stop();\n  }\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["and an ",(0,t.jsx)(n.a,{href:"https://jestjs.io/docs/en/configuration#setupfilesafterenv-array",children:(0,t.jsx)(n.code,{children:"setupFilesAfterEnv"})})," can be used to connect something like ",(0,t.jsx)(n.code,{children:"mongoose"})," or ",(0,t.jsx)(n.code,{children:"mongodb"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"setupFile.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"beforeAll(async () => {\n  // put your client connection code here, example with mongoose:\n  await mongoose.connect(process.env['MONGO_URI']);\n});\n\nafterAll(async () => {\n  // put your client disconnection code here, example with mongoose:\n  await mongoose.disconnect();\n});\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["It is very important to limit the spawned number of Jest workers on machines that have many cores, because otherwise the tests may run slower than with fewer workers, because the database instance(s) may be hit very hard.",(0,t.jsx)(n.br,{}),"\n","Use either ",(0,t.jsx)(n.a,{href:"https://jestjs.io/docs/configuration#maxworkers-number--string",children:(0,t.jsx)(n.code,{children:"--maxWorkers 4"})})," or ",(0,t.jsx)(n.a,{href:"https://jestjs.io/docs/cli#--runinband",children:(0,t.jsx)(n.code,{children:"--runInBand"})})," to limit the workers."]})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Keep in mind that jest's global-setup and global-teardown do ",(0,t.jsx)(n.strong,{children:"not"})," share a environment with the tests themself, and so require ",(0,t.jsx)(n.code,{children:"setupFile"})," / ",(0,t.jsx)(n.code,{children:"setupFilesAfterEnv"})," to actually connect."]})}),"\n",(0,t.jsx)(n.h2,{id:"mocha--chai",children:"mocha / chai"}),"\n",(0,t.jsx)("span",{class:"badge badge--secondary",children:"mocha version (unknown)"}),"\n",(0,t.jsxs)(n.p,{children:["Start Mocha with ",(0,t.jsx)(n.code,{children:"--timeout 60000"})," cause first download of MongoDB binaries may take a time."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import mongoose from 'mongoose';\nimport { MongoMemoryServer } from 'mongodb-memory-server';\n\nlet mongoServer;\n\nbefore(async () => {\n  mongoServer = await MongoMemoryServer.create();\n  const mongoUri = mongoServer.getUri();\n  await mongoose.connect(mongoUri);\n});\n\nafter(async () => {\n  await mongoose.disconnect();\n  await mongoServer.stop();\n});\n\ndescribe('...', () => {\n  it('...', async () => {\n    const User = mongoose.model('User', new mongoose.Schema({ name: String }));\n    const cnt = await User.countDocuments();\n    expect(cnt).to.equal(0);\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"vitest",children:"vitest"}),"\n",(0,t.jsx)("span",{class:"badge badge--secondary",children:"vitest version 3"}),"\n",(0,t.jsxs)(n.p,{children:["For ",(0,t.jsx)(n.a,{href:"https://vitest.dev/",children:"vitest"}),", create a ",(0,t.jsx)(n.a,{href:"https://vitest.dev/config/#globalsetup",children:"global setup file"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"vitest.config.mts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    globalSetup: ['./globalSetup.ts'],\n  },\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"globalSetup.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import type { TestProject } from 'vitest/node';\nimport { MongoMemoryServer } from 'mongodb-memory-server';\n\ndeclare module 'vitest' {\n  export interface ProvidedContext {\n    MONGO_URI: string;\n  }\n}\n\nexport default async function setup({ provide }: TestProject) {\n  const mongod = await MongoMemoryServer.create();\n\n  const uri = mongod.getUri();\n\n  provide('MONGO_URI', uri);\n\n  return async () => {\n    await mongod.stop();\n  };\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then use it in your tests:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"example.test.js"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { inject, test } from 'vitest';\nimport { MongoClient } from 'mongodb';\n\nconst MONGO_URI = inject('MONGO_URI');\nconst mongoClient = new MongoClient(MONGO_URI);\n\nbeforeAll(async () => {\n  await mongoClient.connect();\n  return () => mongoClient.disconnect();\n});\n\ntest('...', () => {\n  const db = mongoClient.db('my-db');\n});\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Keep in mind that the global setup is running in a different global scope, so your tests don't have access to variables defined here. However, you can pass down serializable data to tests via ",(0,t.jsx)(n.a,{href:"https://vitest.dev/config/#provide",children:"provide"})," method as described above."]})}),"\n",(0,t.jsxs)(n.p,{children:["See also ",(0,t.jsx)(n.a,{href:"https://github.com/danielpza/vitest-mms",children:"vitest-mms"}),", which provides the ",(0,t.jsx)(n.code,{children:"globalSetup"})," configuration among others helpers:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    globalSetup: ['vitest-mms/globalSetup'],\n  },\n});\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var s=o(6540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);