"use strict";(self.webpackChunkmongodb_memory_server_website=self.webpackChunkmongodb_memory_server_website||[]).push([[890],{7168:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"api/classes/mongo-instance","title":"MongoInstance","description":"API Documentation of MongoInstance-Class","source":"@site/../docs/api/classes/mongo-instance.md","sourceDirName":"api/classes","slug":"/api/classes/mongo-instance","permalink":"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-instance","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/mongodb-memory-server/edit/master/docs/../docs/api/classes/mongo-instance.md","tags":[],"version":"current","frontMatter":{"id":"mongo-instance","title":"MongoInstance"},"sidebar":"api","previous":{"title":"MongoMemoryReplSet","permalink":"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-memory-replset"},"next":{"title":"MongoBinary","permalink":"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-binary"}}');var i=s(4848),d=s(8453);const o={id:"mongo-instance",title:"MongoInstance"},c=void 0,l={},t=[{value:"Functions",id:"functions",level:2},{value:"new",id:"new",level:3},{value:"debug",id:"debug",level:3},{value:"create",id:"create",level:3},{value:"prepareCommandArgs",id:"preparecommandargs",level:3},{value:"start",id:"start",level:3},{value:"stop",id:"stop",level:3},{value:"_launchMongod",id:"_launchmongod",level:3},{value:"_launchKiller",id:"_launchkiller",level:3},{value:"errorHandler",id:"errorhandler",level:3},{value:"closeHandler",id:"closehandler",level:3},{value:"stderrHandler",id:"stderrhandler",level:3},{value:"stdoutHandler",id:"stdouthandler",level:3},{value:"Values",id:"values",level:2},{value:"instanceOpts",id:"instanceopts",level:3},{value:"binaryOpts",id:"binaryopts",level:3},{value:"spawnOpts",id:"spawnopts",level:3},{value:"extraConnectionOptions",id:"extraconnectionoptions",level:3},{value:"mongodProcess",id:"mongodprocess",level:3},{value:"killerProcess",id:"killerprocess",level:3},{value:"isInstancePrimary",id:"isinstanceprimary",level:3},{value:"isInstanceReady",id:"isinstanceready",level:3},{value:"isReplSet",id:"isreplset",level:3}];function a(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["API Documentation of ",(0,i.jsx)(n.code,{children:"MongoInstance"}),"-Class"]}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.h3,{id:"new",children:"new"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"constructor(opts: Partial<MongodOpts>)"})]}),"\n",(0,i.jsx)(n.p,{children:"Create an new Instance without starting it"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["When directly starting the instance, ",(0,i.jsx)(n.a,{href:"#create",children:(0,i.jsx)(n.code,{children:"create"})})," should be used"]})}),"\n",(0,i.jsx)(n.h3,{id:"debug",children:"debug"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"private debug(msg: string): void"})]}),"\n",(0,i.jsx)(n.p,{children:"Format input with debug-message template"}),"\n",(0,i.jsx)(n.h3,{id:"create",children:"create"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"static async create(opts: Partial<MongodOpts>): Promise<MongoInstance>"})]}),"\n",(0,i.jsx)(n.p,{children:"Create an new Instance and start it (while being an Promise)"}),"\n",(0,i.jsx)(n.h3,{id:"preparecommandargs",children:"prepareCommandArgs"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"prepareCommandArgs(): string[]"})]}),"\n",(0,i.jsx)(n.p,{children:"Constructs the Command Arguments"}),"\n",(0,i.jsx)(n.h3,{id:"start",children:"start"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"async start(): Promise<void>"})]}),"\n",(0,i.jsxs)(n.p,{children:["Start the ",(0,i.jsx)(n.code,{children:"mongod"})," and the watcher processes"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Currently does not check if the instance is in a correct state and just resets all values, see ",(0,i.jsx)(n.a,{href:"https://github.com/typegoose/mongodb-memory-server/issues/662",children:"#662"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"stop",children:"stop"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"async stop(): Promise<boolean>"})]}),"\n",(0,i.jsxs)(n.p,{children:["Stop the ",(0,i.jsx)(n.code,{children:"mongod"})," and the watcher processes"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Will not Error if instance is not running"})}),"\n",(0,i.jsx)(n.h3,{id:"_launchmongod",children:"_launchMongod"}),"\n",(0,i.jsx)("span",{class:"badge badge--warning",children:"Internal"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"_launchMongod(mongoBin: string): ChildProcess"})]}),"\n",(0,i.jsxs)(n.p,{children:["Actually spawn the ",(0,i.jsx)(n.code,{children:"mongod"})," process with ",(0,i.jsx)(n.code,{children:"ChildProcess"}),", used by ",(0,i.jsx)(n.a,{href:"#start",children:(0,i.jsx)(n.code,{children:"start"})})]}),"\n",(0,i.jsx)(n.h3,{id:"_launchkiller",children:"_launchKiller"}),"\n",(0,i.jsx)("span",{class:"badge badge--warning",children:"Internal"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"_launchKiller(parentPid: number, childPid: number): ChildProcess"})]}),"\n",(0,i.jsxs)(n.p,{children:["Spawn an killer process that keeps watch over the ",(0,i.jsx)(n.code,{children:"mongod"})," process"]}),"\n",(0,i.jsx)(n.h3,{id:"errorhandler",children:"errorHandler"}),"\n",(0,i.jsx)("span",{class:"badge badge--warning",children:"Internal"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"errorHandler(err: string): void"})]}),"\n",(0,i.jsxs)(n.p,{children:["Error handler for the ",(0,i.jsx)(n.code,{children:"mongod"})," process"]}),"\n",(0,i.jsx)(n.h3,{id:"closehandler",children:"closeHandler"}),"\n",(0,i.jsx)("span",{class:"badge badge--warning",children:"Internal"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"closeHandler(code: number, signal: string): void"})]}),"\n",(0,i.jsxs)(n.p,{children:["Close handler for the ",(0,i.jsx)(n.code,{children:"mongod"})," process"]}),"\n",(0,i.jsx)(n.h3,{id:"stderrhandler",children:"stderrHandler"}),"\n",(0,i.jsx)("span",{class:"badge badge--warning",children:"Internal"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"stderrHandler(message: string | Buffer): void"})]}),"\n",(0,i.jsxs)(n.p,{children:["STDERR handler for the ",(0,i.jsx)(n.code,{children:"mongod"})," process"]}),"\n",(0,i.jsx)(n.h3,{id:"stdouthandler",children:"stdoutHandler"}),"\n",(0,i.jsx)("span",{class:"badge badge--warning",children:"Internal"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"stdoutHandler(message: string | Buffer): void"})]}),"\n",(0,i.jsxs)(n.p,{children:["STDOUT handler for the ",(0,i.jsx)(n.code,{children:"mongod"})," process",(0,i.jsx)(n.br,{}),"\n","Matches process output against known formats and raise events"]}),"\n",(0,i.jsx)(n.h2,{id:"values",children:"Values"}),"\n",(0,i.jsx)(n.h3,{id:"instanceopts",children:"instanceOpts"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"instanceOpts: MongoInstanceOpts"})]}),"\n",(0,i.jsxs)(n.p,{children:["Also known as ",(0,i.jsx)(n.code,{children:"instance"})," for ",(0,i.jsx)(n.a,{href:"#new",children:(0,i.jsx)(n.code,{children:"new"})})," & ",(0,i.jsx)(n.a,{href:"#create",children:(0,i.jsx)(n.code,{children:"create"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Stores the Instance Options"}),"\n",(0,i.jsx)(n.h3,{id:"binaryopts",children:"binaryOpts"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"readonly binaryOpts: Readonly<MongoBinaryOpts>"})]}),"\n",(0,i.jsxs)(n.p,{children:["Also known as ",(0,i.jsx)(n.code,{children:"binary"})," for ",(0,i.jsx)(n.a,{href:"#new",children:(0,i.jsx)(n.code,{children:"new"})})," & ",(0,i.jsx)(n.a,{href:"#create",children:(0,i.jsx)(n.code,{children:"create"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Stores the Binary Options"}),"\n",(0,i.jsx)(n.h3,{id:"spawnopts",children:"spawnOpts"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"readonly spawnOpts: Readonly<SpawnOptions>"})]}),"\n",(0,i.jsxs)(n.p,{children:["Also known as ",(0,i.jsx)(n.code,{children:"spawn"})," for ",(0,i.jsx)(n.a,{href:"#new",children:(0,i.jsx)(n.code,{children:"new"})})," & ",(0,i.jsx)(n.a,{href:"#create",children:(0,i.jsx)(n.code,{children:"create"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Stores the Spawn Options"}),"\n",(0,i.jsxs)(n.p,{children:["See NodeJS ",(0,i.jsxs)(n.a,{href:"https://nodejs.org/api/child_process.html#child_processspawncommand-args-options",children:[(0,i.jsx)(n.code,{children:"child_process.spawn"})," options"]})," for details."]}),"\n",(0,i.jsx)(n.h3,{id:"extraconnectionoptions",children:"extraConnectionOptions"}),"\n",(0,i.jsx)("span",{class:"badge badge--warning",children:"Internal"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"extraConnectionOptions?: MongoClientOptions"})]}),"\n",(0,i.jsxs)(n.p,{children:["Contains extra Connection options used for ",(0,i.jsx)(n.code,{children:"mongoClient.connect"}),", this is mainly used for authentication"]}),"\n",(0,i.jsx)(n.h3,{id:"mongodprocess",children:"mongodProcess"}),"\n",(0,i.jsx)("span",{class:"badge badge--warning",children:"Internal"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"mongodProcess?: ChildProcess"})]}),"\n",(0,i.jsxs)(n.p,{children:["Stores the active process reference for the ",(0,i.jsx)(n.code,{children:"mongod"})," process"]}),"\n",(0,i.jsx)(n.h3,{id:"killerprocess",children:"killerProcess"}),"\n",(0,i.jsx)("span",{class:"badge badge--warning",children:"Internal"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"killerProcess?: ChildProcess"})]}),"\n",(0,i.jsx)(n.p,{children:"Stores the active process reference for the killer process"}),"\n",(0,i.jsx)(n.h3,{id:"isinstanceprimary",children:"isInstancePrimary"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"isInstancePrimary: boolean"})]}),"\n",(0,i.jsx)(n.p,{children:"Stores that the process is an Primary (ReplSet) (event emitted when found in STDOUT)"}),"\n",(0,i.jsx)(n.h3,{id:"isinstanceready",children:"isInstanceReady"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"isInstanceReady: boolean"})," (event emitted when found in STDOUT)"]}),"\n",(0,i.jsx)(n.p,{children:"Stores that the process is fully started"}),"\n",(0,i.jsx)(n.h3,{id:"isreplset",children:"isReplSet"}),"\n",(0,i.jsxs)(n.p,{children:["Typings: ",(0,i.jsx)(n.code,{children:"isReplSet: boolean"})]}),"\n",(0,i.jsxs)(n.p,{children:["Stores that the process is in an ReplSet, is ",(0,i.jsx)(n.code,{children:"true"})," when ",(0,i.jsx)(n.a,{href:"#instanceopts",children:(0,i.jsx)(n.code,{children:"instanceOpts.replSet"})})," is defined and truthy"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(6540);const i={},d=r.createContext(i);function o(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);